import {compose, lifecycle} from 'recompose';
import {constructHydraId, getConvoIdFromUrl, hydraTypes} from '@webex/react-component-utils';

import {eventNames} from '../events';

export default compose(lifecycle({
  componentWillReceiveProps(nextProps) {
    // Only add listeners if this is a new call
    // eslint-disable-next-line no-warning-comments
    // TODO: Need to create a better way to hook into call cycle
    const {
      users,
      onEvent,
      call
    } = nextProps;

    function handleEvent({membership, name}) {
      const actorName = users.getIn(['byId', membership.personUuid, 'displayName']);
      const details = {
        actorId: membership.personId,
        actorName
      };

      if (call.locus && call.locus.conversationUrl) {
        details.roomId = constructHydraId(hydraTypes.ROOM, getConvoIdFromUrl(call.locus.conversationUrl));
      }

      return onEvent(name, details);
    }

    if (!this.props.call && call && typeof onEvent === 'function') {
      // TODO: move these events to use the meetings plugin
      /*
      call.get('instance')
        .on('membership:connected', (membership) => {
          handleEvent({
            name: eventNames.MEMBERSHIPS_CONNECTED,
            membership
          });
        })
        .on('membership:declined', (membership) => {
          handleEvent({
            name: eventNames.MEMBERSHIPS_DECLINED,
            membership
          });
        })
        .on('membership:disconnected', (membership) => {
          handleEvent({
            name: eventNames.MEMBERSHIPS_DISCONNECTED,
            membership
          });
        });
        */
    }
  }
}));

